import * as Lexer from "./lexer";
export declare function enumeration(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function enumValue(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function singleEnumValue(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function enumMemberValue(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function singleQualifiedTypeName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function qualifiedTypeName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function qualifiedEntityTypeName(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function qualifiedComplexTypeName(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function qualifiedTypeDefinitionName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function qualifiedEnumTypeName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function namespace(value: number[] | Uint8Array, index: number): number;
export declare function odataIdentifier(value: number[] | Uint8Array, index: number, tokenType?: Lexer.TokenType): Lexer.Token;
export declare function namespacePart(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function entitySetName(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function singletonEntity(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function entityTypeName(value: number[] | Uint8Array, index: number, schema?: any): Lexer.Token;
export declare function complexTypeName(value: number[] | Uint8Array, index: number, schema?: any): Lexer.Token;
export declare function typeDefinitionName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function enumerationTypeName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function enumerationMember(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function termName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function primitiveTypeName(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function primitiveProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveKeyProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveNonKeyProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveColProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function complexProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function complexColProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function streamProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function navigationProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function entityNavigationProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function entityColNavigationProperty(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function action(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function actionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function odataFunction(value: number[] | Uint8Array, index: number): Lexer.Token;
export declare function entityFunction(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function entityColFunction(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function complexFunction(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function complexColFunction(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function primitiveFunction(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function primitiveColFunction(value: number[] | Uint8Array, index: number, isCollection?: boolean, metadataContext?: any): Lexer.Token;
export declare function entityFunctionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function entityColFunctionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function complexFunctionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function complexColFunctionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveFunctionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
export declare function primitiveColFunctionImport(value: number[] | Uint8Array, index: number, metadataContext?: any): Lexer.Token;
